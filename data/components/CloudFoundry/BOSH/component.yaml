documentation_complete: false
name: BOSH
references:
- name: Bosh source code
  path: https://github.com/cloudfoundry/bosh
  type: URL
- name: Bosh Documentation
  path: https://bosh.io/docs
  type: URL
verifications:
  STATIC_CODE_ANALYSIS:
    name: Bosh source code static analysis
    type: URL
    path: https://codeclimate.com/github/cloudfoundry/bosh
satisfies:
  NIST-800-53:
    CM-2:
      implementation_status: null
      narrative: |
        18F utilizes the Cloud Foundry Secure Deployment best practices which include the following:
        Configure UAA clients and users using a standard BOSH manifest for cloud Foundry Deployment. Limit and manage these clients and users as you would any other kind of privileged account.
        Deploy within a VPC that limits network traffic to individual VMs. This reduces the possibility of unauthorized access to the VMs within your BOSH-managed cloud.
        Enable HTTPS for applications and SSL database connections to protect sensitive data transmitted to and from applications.
        Ensure that the jumpbox is secure, along with the load balancer and NAT VM.
        Encrypt stored files and data within databases to meet data security requirements. Deploy using industry standard encryption and the best practices for your language or framework.
        Prohibit promiscuous network interfaces on the trusted network.
        Review and monitor data sharing and security practices with third-party services that you use to provide additional functionality to your application.
        Store SSH keys securely to prevent disclosure, and promptly replace lost or compromised keys.
        Use Cloud Foundry’s RBAC model to restrict users’ access to only what is necessary to complete their tasks.
        Use a strong passphrase for both Cloud Foundry user account and SSH keys.

        Store SSH keys securely to prevent disclosure, and promptly replace lost or compromised keys.
        Use Cloud Foundry’s RBAC model to restrict users’ access to only what is necessary to complete their tasks.
        Use a strong passphrase for both Cloud Foundry user account and SSH keys.

        For further information regarding Cloud Foundry best practices please refer to:
        https://docs.cloudfoundry.org/devguide/deploy-apps/prepare-to-deploy.html
        https://docs.cloudfoundry.org/concepts/security.html


    SA-11 (1):
      implementation_status: implemented
      narrative: |
        Bosh uses CodeClimate as it's primary static code analysis tool. The results of the test are publicly avaiable.
      references:
        - verification: STATIC_CODE_ANALYSIS

    SI-10:
      implementation_status: implemented
      narrative: |
        All 18F DevOps user input happens at the BOSH command line interface (CLI) which requires specific syntax and parameters to be used in order to execute job functions. Rules for checking the valid syntax of information system inputs (e.g., character set, length, numerical range, acceptable values) are in place to verify that inputs match specified definitions for format and content. Inputs passed to interpreters are prescreened to prevent the content from being unintentionally interpreted as commands. The extent to which the information system is able to check the accuracy, completeness, validity, and authenticity of information is guided by organizational policy and operational requirements.
        The data inputs as part of the Cloud Foundry are validated in several ways. The validation is a series of steps put in place to ensure consistent data and to protect the system from corruption, either malicious or accidental. The data validation takes place in the same mechanism either through the web user interface (where data validation errors are shown to the authenticated user to correct) or programmatically through web service APIs. (where error messages are returned showing where data is rejected).
