documentation_complete: false
name: User Account and Authentication (UAA) Server
references:
- name: User Account and Authentication (UAA) Server
  type: URL
  path: http://docs.pivotal.io/pivotalcf/concepts/architecture/uaa.html
- name: Creating and Managing Users with the UAA CLI (UAAC)
  type: URL
  path: http://docs.pivotal.io/pivotalcf/adminguide/uaa-user-management.html
- name: UAA Roles
  type: URL
  path: https://cf-p1-docs-prod.cfapps.io/pivotalcf/concepts/roles.html
- name: Cloud Foundry Org Access
  type: URL
  path: https://github.com/cloudfoundry/cloud_controller_ng/blob/master/spec/unit/access/organization_access_spec.rb
- name: Cloud Foundry Space Access
  type: URL
  path: https://github.com/cloudfoundry/cloud_controller_ng/blob/master/spec/unit/access/space_access_spec.rb
satisfies:
  NIST-800-53:
    AC-2:
      implementation_status: null
      narrative:
        a: |
          Cloud Foundry user and role accounts are managed and maintained through the UAA API. Cloud Foundry uses role-based access control with each role granting permissions in either an organization or an application space. The Following types are used:
          * Org Manager
          * Org Auditor
          * Space Manager
          * Space Developer
          * Space Auditor

        k: |
          Cloud.Gov utilizes role based access controls (RBAC) for group membership within the platform and does not issue shared/group account credentials.

    AC-2 (1):
      implementation_status: null
      narrative: |
        Cloud Foundryâ€™s UAA implements a series of automations to ensure that system accounts follow specific password guidelines and have the intended roles.
    AC-2 (2):
      implementation_status: null
      narrative: |
        This control is not applicable. Cloud.Gov does not contain any guest/anonymous, group, or temporary user accounts. Devops only creates individual user accounts and grants role based access to users within Cloud.Gov.
    AC-2 (3):
      implementation_status: null
      narrative: |
        User accounts for 18F staff are monitored monthly and are disabled after 90 days of inactivity; this will be a manual review process every 30 days however the disablement will be automatic through the UAA.
        Client organzations using the Cloud.Gov platform are responsible for monitoring inactive user accounts created within their Cloud.Gov Org account. 18F staff are not responsible for these accounts
    AC-2 (5):
      implementation_status: null
      narrative: |
        Currently Cloud.Gov does not have an account lockout function (work in progress).
    AC-2 (9):
      implementation_status: null
      narrative: |
        This control is not applicable. Group accounts are not allowed  within the 18F VPC and the Cloud.Gov PaaS
    AC-2 (10):
      implementation_status: null
      narrative: |
        This control is not applicable. Group accounts are not allowed  within the 18F VPC and the Cloud.Gov PaaS
    AC-5:
      implementation_status: null
      narrative:
        a: |
          The Cloud.Gov UAA is used to create invidual user accounts and roles within the PaaS for separation of duty functions. The following is a list of roles a user can assume within the Cloud.Gov platform.
          * Org Manager  - Managers or other users who need to administer the account
          * Org Auditor - Can view but not edit user information and org quota usage information
          * Space Manager - managers or other users who need to administer a space
          * Space Developer - application developers or other users who need to manage applications and services in a space
          * Space Auditor	- Can view but not edit the space

        b: |
          The UAA API has an enpoint for viewing extensive information about user roles.
    AC-6:
      implementation_status: null
      narrative: |
        Cloud.Gov uses feature flags which allows an administrator to turn on or off sub-sections, or features, of an application without deploying new code.
        18F uses Orgs, Spaces, and Roles to implement least privileged access to the platform as a service. Cloud.Gov uses role-based access control (RBAC), with each role granting permissions in either an org or a space.
    AC-6 (10):
      implementation_status: null
      narrative: |
        The Cloud.Gov platform has built-in Role based access controls (RBAC). This ensures that users can only view and affect the spaces for which they have been granted access to. It also prevents non-privileged users from executing privileged functions to include disabling, circumventing, or altering implemented security safeguards/countermeasures.
        Only designated Org Managers from the DevOps team can execute privileged functions to the Cloud.Gov platform. All other accounts are non-prilviledged accounts.
        Client agencies using Cloud.Gov are only permitted to change settings within their associated  Org account, spaces and roles. These accounts do not have access to the the underlying Cloud.Gov Platform.
    AC-14:
      implementation_status: null
      narrative:
        a: |
          There are no permitted actions without identification and authentication to Cloud.Gov. The Cloud Controller rejects any broker registration that does not contain a username and password. The Cloud Controller authenticates every request with the Service Broker API using HTTP or HTTPS, depending on which protocol you specify during broker registration.
    IA-2:
      implementation_status: null
      narrative: |
        The UAA is the identity management service for Cloud Foundry. Its primary role is as an OAuth2 provider, issuing tokens for client applications to use when they act on behalf of Cloud Foundry users. In collaboration with the login server, it authenticates users with their Cloud Foundry credentials, and act as a Single Sign-On (SSO) service using those credentials (or others). It has endpoints for managing user accounts and for registering OAuth2 clients, as well as various other management functions.
        All users have individually unique identifiers to access and authenticates  to the environment. Shared or group authenticators are not utilized, with the exception of a root administrative account. There are only two authorized users from the DevOps team who has access to the root administrative account.
